#include "structures.h"

piece* DOMINO = NULL;
piece* DOMJ1 = NULL;
piece* DOMJ2 = NULL;
piece* DOMJ3 = NULL;
piece* DOMJ4 = NULL;
piece* JOUEUR1 = NULL;
piece* JOUEUR2 = NULL;
piece* JOUEUR3 = NULL;
piece* JOUEUR4 = NULL;

void alloc_jeu();
void alloc_joueurs();
void desalloc_jeu();
void init_pieces();
void init_domJ();
void hasard( int* melange);
void distribution_carte(int nbJoueur);
void distribution_2J();
void distribution_3_4J(int nbJoueur);
int veriff_jCommence(int grdDoubleJ, int jCommenceJ);
void ordre_joueur(int jCommence, int nbJoueur);

int main()
{
	int i,j,resultat;
	//~ //info a recuperer depuis code d'helo
	int jCommence =2, grdDouble=5, nbJoueur = 2;
	srand(time(NULL));

	alloc_jeu();
	alloc_joueurs();
	init_pieces();
	init_domJ();
	distribution_carte(nbJoueur);
	
	
	
	//~ //recuperer jCommence et grdDouble a partir du code d'helo
	do
	{
		resultat = veriff_jCommence(grdDouble,jCommence);
	}while(resultat==0);
	
	ordre_joueur(jCommence, nbJoueur);
	
	desalloc_jeu();
	
		
	return 0;	
}

void alloc_jeu()
{
	int i;
	
	DOMINO = (piece*) malloc (28*sizeof(piece));
	if(DOMINO == NULL)
	{
		printf("PB alloction jeu\n");
		free(DOMINO);
		exit(0);
	}	
	for(i=0;i<28;i++)
	{
		//~ printf("i:%d \n",i);
		DOMINO[i].number = (int*) malloc (2*sizeof(int));
		if(DOMINO[i].number == NULL)
		{
			printf("PB alloction jeu\n");
			free(DOMINO[i].number);
			exit(0);
		}
	}
}

void desalloc_jeu()
{ 
	int i;
	for(i=0;i<28;i++)
	{
		free(DOMINO[i].number);
	}
	free(DOMINO);
	
}
void desalloc_joueur()
{ 
	int i;
	for(i=0;i<7;i++)
	{
		free(DOMJ1[i].number);
		free(DOMJ2[i].number);
		free(DOMJ3[i].number);
		free(DOMJ4[i].number);
	}
	free(DOMJ1);
	free(DOMJ2);
	free(DOMJ3);
	free(DOMJ4);
	
}

void alloc_joueurs()
{
	int i;
	
	DOMJ1 = (piece*) malloc (7*sizeof(piece));	
	DOMJ2 = (piece*) malloc (7*sizeof(piece));	
	DOMJ3 = (piece*) malloc (7*sizeof(piece));	
	DOMJ4 = (piece*) malloc (7*sizeof(piece));	
	if( (DOMJ1 == NULL)
		|| (DOMJ2 == NULL)
		|| (DOMJ3 == NULL)
		|| (DOMJ4 == NULL)
	   ) {
		printf("PB alloction joueur1\n");
		free(DOMJ1);
		free(DOMJ2);
		free(DOMJ3);
		free(DOMJ4);
		exit(0);
	}
	
	for(i=0;i<7;i++)
	{
		DOMJ1[i].number = (int*) malloc (2*sizeof(int));
		DOMJ2[i].number = (int*) malloc (2*sizeof(int));
		DOMJ3[i].number = (int*) malloc (2*sizeof(int));
		DOMJ4[i].number = (int*) malloc (2*sizeof(int));
		if( (DOMJ1[i].number == NULL)
			|| (DOMJ2[i].number == NULL)
			|| (DOMJ3[i].number == NULL)
			|| (DOMJ4[i].number == NULL)
		   ) {
			printf("PB alloction joueur2\n");
			free(DOMJ1[i].number);
			free(DOMJ2[i].number);
			free(DOMJ3[i].number);
			free(DOMJ4[i].number);
			exit(0);
		}
	}
}

void init_pieces()
{
	int a=0, b=0, i,j;

	for(i=0;i<28;i++)
	{
		for(j=0;j<2;j++)
		{
			if(j==0)
			{
				DOMINO[i].number[j] = a;
			}
			else
			{
				DOMINO[i].number[j] = b;
				b++;
			}
			if(b==7)
			{
				a++;
				b=a;
			}
		}	
	}
	
}

void hasard( int* melange)
{
	int a,b,i;
	for(i=0;i<28;i++)
	{
		melange[i]=i;
	}

	for(i=0;i<28;i++)
	{
		b =rand()%28;
		a = melange[i];
		melange[i] = melange[b];
		melange[b] = a;
	}
}
void init_domJ()
{ 
	int i,j;
	
	for(i=0;i<7;i++)
	{
		for(j=0;j<2;j++)
		{
			DOMJ1[i].number[j] = 8;
			DOMJ2[i].number[j] = 8;
			DOMJ3[i].number[j] = 8;
			DOMJ4[i].number[j] = 8;
		}
	}
}

void distribution_2J()
{
	int a=0,i,b=0, melange[28];
	hasard(melange);
	i=0;
	do
	{
		if(i%2==0)
		{
			DOMJ1[a].number[0]= DOMINO[melange[i]].number[0];
			DOMJ1[a].number[1]= DOMINO[melange[i]].number[1];
			a++;
		}
		else if(i%2==1)
		{
			DOMJ2[b].number[0]= DOMINO[melange[i]].number[0];
			DOMJ2[b].number[1]= DOMINO[melange[i]].number[1];
			b++;
		}
		i++;
	} while((a<7)||(b<7));
	
}
void distribution_3_4J(int nbJoueur)
{
	int a=0,i,b=0,c=0,d=0, melange[28];
	hasard(melange);
	i=0;
	do
	{
		if(i%4==0)
		{
			DOMJ1[a].number[0]= DOMINO[melange[i]].number[0];
			DOMJ1[a].number[1]= DOMINO[melange[i]].number[1];
			a++;
		}
		else if(i%4==1)
		{
			DOMJ2[b].number[0]= DOMINO[melange[i]].number[0];
			DOMJ2[b].number[1]= DOMINO[melange[i]].number[1];
			b++;
		}
		else if(i%4==2)
		{
			DOMJ3[c].number[0]= DOMINO[melange[i]].number[0];
			DOMJ3[c].number[1]= DOMINO[melange[i]].number[1];
			c++;
		}
		else if(i%4==3 && nbJoueur==4)
		{
			DOMJ4[d].number[0]= DOMINO[melange[i]].number[0];
			DOMJ4[d].number[1]= DOMINO[melange[i]].number[1];
			d++;
		}
		i++;
	} while((a<6) || (b<6) || (c<6) || ( (d<6) && (nbJoueur==4)) );
	
}

int veriff_jCommence(int grdDoubleJ, int jCommenceJ)
{
	int resultat, i=0, grdDoubleO=0, jCommenceO=0;
	
do
	{	
		
		if(	(DOMJ1[i].number[0] == DOMJ1[i].number[1])
			&& (DOMJ1[i].number[1]<7)
			&& (DOMJ1[i].number[1]>= grdDoubleO)
			)
		{
			grdDoubleO=DOMJ1[i].number[1];
			jCommenceO=1;
		}
		if(	(DOMJ2[i].number[0] == DOMJ2[i].number[1])
			&& (DOMJ2[i].number[1]<7)
			&& (DOMJ2[i].number[1]>= grdDoubleO)
			)
		{
			grdDoubleO=DOMJ2[i].number[1];
			jCommenceO=2;
		}
		if(	(DOMJ3[i].number[0] == DOMJ3[i].number[1])
			&& (DOMJ3[i].number[1]<7)
			&& (DOMJ3[i].number[1]>= grdDoubleO)
			)
		{
			grdDoubleO=DOMJ3[i].number[1];
			jCommenceO=3;
		}
		if(	(DOMJ4[i].number[0] == DOMJ4[i].number[1])
			&& (DOMJ4[i].number[1]<7)
			&& (DOMJ4[i].number[1]>= grdDoubleO)
			)
		{
			grdDoubleO=DOMJ4[i].number[1];
			jCommenceO=4;
		}
		i++;
	}while(grdDoubleO!=6 && i<7);
	
	
	if(jCommenceO==jCommenceJ && grdDoubleO==grdDoubleJ)
	{
		resultat = 1;
	}
	else 
	{
		resultat = 0;
	}
	return 1 ; //resultat (Ã  modif qd j'aurais la partie d'helo)
}


void ordre_joueur(int jCommence, int nbJoueur)
{	
	if(nbJoueur==2)
	{
		if(jCommence==1)
		{
			JOUEUR1=DOMJ1;
			JOUEUR2=DOMJ2;
		}
		else if(jCommence==2)
		{
			JOUEUR1=DOMJ2;
			JOUEUR2=DOMJ1;
		}	
	}
	else if(nbJoueur==3)
	{
		if(jCommence==1)
		{
			JOUEUR1=DOMJ1;
			JOUEUR2=DOMJ2;
			JOUEUR3=DOMJ3;
		}
		else if(jCommence==2)
		{
			JOUEUR1=DOMJ2;
			JOUEUR2=DOMJ3;
			JOUEUR3=DOMJ1;
		}	
		else if(jCommence==3)
		{
			JOUEUR1=DOMJ3;
			JOUEUR3=DOMJ1;
			JOUEUR4=DOMJ2;
		}	
	}
	else 
	{
		if(jCommence==1)
		{
			JOUEUR1=DOMJ1;
			JOUEUR2=DOMJ2;
			JOUEUR3=DOMJ3;
			JOUEUR4=DOMJ4;
		}
		else if(jCommence==2)
		{
			JOUEUR1=DOMJ2;
			JOUEUR2=DOMJ3;
			JOUEUR3=DOMJ4;
			JOUEUR4=DOMJ1;
		}	
		else if(jCommence==3)
		{
			JOUEUR1=DOMJ3;
			JOUEUR2=DOMJ4;
			JOUEUR3=DOMJ1;
			JOUEUR4=DOMJ2;
		}	
		else if(jCommence==2)
		{
			JOUEUR1=DOMJ4;
			JOUEUR2=DOMJ1;
			JOUEUR3=DOMJ2;
			JOUEUR4=DOMJ3;
		}
	}
	}
void distribution_carte(int nbJoueur)
{
	
	if(nbJoueur==2)
	{
		distribution_2J();
	}
	else
	{
		distribution_3_4J(4);
	}
}
